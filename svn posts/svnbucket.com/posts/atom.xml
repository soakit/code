<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SVN使用教程</title>
  
  <subtitle>svn托管平台</subtitle>
  <link href="https://svnbucket.com/posts/atom.xml" rel="self"/>
  
  <link href="https://svnbucket.com/posts/"/>
  <updated>2022-01-01T06:45:32.997Z</updated>
  <id>https://svnbucket.com/posts/</id>
  
  <author>
    <name>SVNBucket</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SVN 不显示状态图标的解决方法</title>
    <link href="https://svnbucket.com/posts/svn-icon-fix/"/>
    <id>https://svnbucket.com/posts/svn-icon-fix/</id>
    <published>2022-01-01T06:10:56.000Z</published>
    <updated>2022-01-01T06:45:32.997Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的电脑安装 TortoiseSVN 之后没有，SVN 目录没有显示状态图标，这篇文章告诉你如何解决。</p><span id="more"></span><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>有很多软件都会给 Windows 目录设置状态图标，例如一些网盘软件，当然还有 TortoiseSVN。<br>它们是按照优先级来决定显示哪个的，如果 TortoiseSVN 被排在后面，就会导致状态图标显示不出来.</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>目录图标的显示顺序是在注册表定义的,我们可以通过修改注册表来调整这个顺序<br>WIN + R 打开运行窗口,输入<code>regedit</code>打开注册表<br><img src="./open.png" alt="open"></p><p>找到这个位置:<br><code>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers</code><br>箭头所指目录就是定义了图标显示顺序,可以看到 TortoiseSVN 排在了两个网盘的后面<br><img src="./before.png" alt="before"></p><p>我们可以通过在前面增加空格来提高他的排序，注意这里增加的空格数量要比前面的网盘目录多，这样才能排到最前面去。</p><p>按 F2 进行目录名修改,调整后如下图，改完后你可以 F5 刷新下，会发现排序已经到最前面了.</p><p><img src="./after.png" alt="after"></p><p>最后，打开任务管理器，重启下资源管理器就好了<br><img src="./restart.png" alt="restart"></p><p>最后，给大家推荐一个非常好用的在线 SVN 托管仓库：<a href="https://svnbucket.com/">SVNBucket</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你的电脑安装 TortoiseSVN 之后没有，SVN 目录没有显示状态图标，这篇文章告诉你如何解决。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>引用外部 SVN 项目 svn:externals 用法</title>
    <link href="https://svnbucket.com/posts/svn-externals/"/>
    <id>https://svnbucket.com/posts/svn-externals/</id>
    <published>2022-01-01T03:16:54.000Z</published>
    <updated>2022-01-01T06:45:25.909Z</updated>
    
    <content type="html"><![CDATA[<p>假如你的 SVN 项目分为客户端、服务端，它们需要用到同一份配置，那么可以在 /client/common 、 /server/common 目录中存放相同的配置文件，但是每次一方修改后都要手动复制修改到另外一个目录？这也太麻烦了吧，有没更好的方法呢？这篇文章给你讲解如何使用 svn:externals 完美的解决。</p><span id="more"></span><p>假设我们的目录结构如下图所示，服务端客户端都有一个 common 目录:<br><img src="./dir.png" alt="目录结构"></p><p>最简单的方法也是最笨的方法，就是每次修改后都手动复制文件到另外一个目录，人工确保两个目录的文件一致，这很容易出问题。</p><p>稍微好点的方法是，在 /server/common 目录检出（checkout）一份 /client/common，这样省去了复制文件的麻烦，每次只需要到 common 目录进行 update 就行了。但是，我们必须记得要进去 common 目录进行更新才行，直接在外层目录进行 update 是不会更新的。</p><p>其实，SVN 还有提供一个叫 externals 的属性，可以用来在目录中引入其他 SVN 地址目录，更新时还会同步自动更新这个引入的 external 目录。</p><p>在你需要的目录，右键选择 TortoiseSVN - Properties：<br><img src="./properties-menu.png" alt="svn properties"></p><p>在打开的属性窗口中，我们点击新建添加外部（Externals）SVN 目录<br><img src="./new-properties.png" alt="svn external"></p><p>填写保存目录（Local path），外部 SVN 地址（URL)，最后点击确定<br><img src="./add-external.png" alt="add-external"></p><p>添加成功后，我们可以看到属性列表窗口已经列出来我们刚添加的地址了。<br>这样，我们就把客户端 /client/common 目录引入到了 /server/common<br><img src="./after-add.png" alt="after-add"></p><p>现在，我们更新试下，发现外部引入的 SVN 目录也会自动更新了，而且不需要进入 common 目录去更新，在父目录也是可以更新到的。<br>另外，这个外部引入的 SVN 目录，你一样可以进行修改提交，然后其他地方都能更新到这个修改。<br><img src="./update.png" alt="update externals"></p><blockquote><p>提醒下大家，这个引入外部 SVN 目录是可以任何 SVN 地址的，不管你是不是同个 SVN 仓库都行。</p></blockquote><p>最后，给大家推荐一个非常好用的在线 SVN 托管仓库：<a href="https://svnbucket.com/">SVNBucket</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;假如你的 SVN 项目分为客户端、服务端，它们需要用到同一份配置，那么可以在 /client/common 、 /server/common 目录中存放相同的配置文件，但是每次一方修改后都要手动复制修改到另外一个目录？这也太麻烦了吧，有没更好的方法呢？这篇文章给你讲解如何使用 svn:externals 完美的解决。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN 代码暂存Shelve的用法</title>
    <link href="https://svnbucket.com/posts/shelve/"/>
    <id>https://svnbucket.com/posts/shelve/</id>
    <published>2021-07-14T06:07:54.000Z</published>
    <updated>2021-07-14T09:11:08.317Z</updated>
    
    <content type="html"><![CDATA[<p>代码写到一半，还不能提交代码，但需要紧急修复一个 Bug 并更新到服务器怎么办？把写到一半的代码丢弃？复制出来备份下？SVN的代码暂存是更好的选择。<br>本文为你讲解在 Windows 上，使用 TortoiseSVN 如何利用代码暂存功能保存我们暂时无法提交的代码。</p><span id="more"></span><h4 id="暂存代码"><a href="#暂存代码" class="headerlink" title="暂存代码"></a>暂存代码</h4><p>代码暂存，英文叫 shelve，意思是置物架、搁置。<br>日常工作中经常会遇到需要暂时搁置写到一半的代码，然后去修复一个问题或开发另外一个更加紧急的功能。<br>使用 TortoiseSVN 非常方便，在目录下右键，选择 TortoiseSVN –&gt; Shelve 就可以看到如下图，<br>上面部分是选择需要暂存的文件，中间是暂存的名字，以便后面恢复时明白存的是什么内容，<br>底部是填写暂存的描述信息，跟提交日志是一样的。<br>如果点击 Shelve 则会把选中的文件都暂存起来，并且把本地的修改全部撤销。<br>如果点击 Checkpoint，则只是暂存代码，本地的修改还是保留着。<br><img src="shelve.png" alt="SVN 代码暂存 shelve"></p><h4 id="暂存的版本管理"><a href="#暂存的版本管理" class="headerlink" title="暂存的版本管理"></a>暂存的版本管理</h4><p>实际上，暂存就好像把代码提交到了你本地的一个临时仓库，也是有版本管理的，<br>如果你暂存时名字是选择一个已经存在的，则会生成一个新的版本号，跟 SVN 的代码提交是一样的。<br><img src="shelve-version.png" alt="SVN 代码暂存 shelve"></p><h4 id="取出暂存代码"><a href="#取出暂存代码" class="headerlink" title="取出暂存代码"></a>取出暂存代码</h4><p>取出也非常方便，在目录下右键，选择 TortoiseSVN –&gt; Unshelve，我们可以选择取出哪个暂存代码，并且可以选择版本，如下图<br>取出后代码就恢复到我们之前的样子了。<br>代码暂存只是把代码临时存储到本地的一个地方了，并不会影响其他人。<br><img src="unshelve.png" alt="SVN 取出暂存 unshelve"></p><p>如果你还有什么不明白，更详细的使用方法，可以看 <a href="https://www.bilibili.com/video/BV1k4411m7mP?p=7">视频教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码写到一半，还不能提交代码，但需要紧急修复一个 Bug 并更新到服务器怎么办？把写到一半的代码丢弃？复制出来备份下？SVN的代码暂存是更好的选择。&lt;br&gt;本文为你讲解在 Windows 上，使用 TortoiseSVN 如何利用代码暂存功能保存我们暂时无法提交的代码。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Pycharm中使用SVN的配置教程</title>
    <link href="https://svnbucket.com/posts/pycharm-svn/"/>
    <id>https://svnbucket.com/posts/pycharm-svn/</id>
    <published>2021-05-12T10:32:19.000Z</published>
    <updated>2021-05-13T02:29:51.160Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解如何在Pycharm中开启SVN，以及他的一些日常使用方法</p><span id="more"></span><h6 id="开启SVN"><a href="#开启SVN" class="headerlink" title="开启SVN"></a>开启SVN</h6><p>开启 svn 分两种情况，还未检出代码的，Pycharm 里直接检出就继承好了。<br>已经用其他SVN客户端（例如TortoiseSVN）检出代码的，开启下 SVN 就好了，如下图：<br><img src="gZ4vhstyGNpHOwo.jpg" alt="检出和直接开启SVN.jpg"></p><p>开启成功后，你应该可以看到如下图状态，在这里我们就可以快速的更新代码、提交代码<br><img src="uiL16Z2acQkBRh7.jpg" alt="集成SVN后的状态.jpg"></p><h6 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h6><p>集成后，在Pycharm的左下角可以看到一个 Version Control的界面，这里可以看到哪些文件变动了<br><img src="OGlFz6y93YLPast.jpg" alt="底部变动列表.jpg"></p><p>另外 Pycharm 有个很方便的地方，你改动的行会有特殊的颜色表示，这样写代码时很容易就知道哪些地方修改过，方便快速定位<br><img src="kPKOYtcqdJz59El.jpg" alt="新增的一行颜色状态标识.jpg"></p><p>Pycharm还自己有一个本地修改记录，如下图，从我创建hello.py，修改内容，到提交到svn，每次的修改都有记录，非常方便。<br>特别是在有时候你一部小心破坏了代码，但是又没提交到SVN，这时候从本地记录里面总能找到你的历史。<br><img src="AzZgFvxn8yNsGtD.jpg" alt="本地历史记录菜单入口.jpg"><br><img src="ZjRwAxuNIp17zVB.jpg" alt="本地修改记录.jpg"></p><p>最后是提交界面，能方便的看到哪些文件变动了，改了什么东西<br><img src="h3fwBuD7aENWd4l.jpg" alt="提交界面.jpg"></p><p>更多SVN的常用操作，可以查看<a href="/posts/svn-tutorial/">SVN使用教程</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文讲解如何在Pycharm中开启SVN，以及他的一些日常使用方法&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>idea使用SVN教程</title>
    <link href="https://svnbucket.com/posts/idea-use-svn-tutorial/"/>
    <id>https://svnbucket.com/posts/idea-use-svn-tutorial/</id>
    <published>2021-05-11T02:51:08.000Z</published>
    <updated>2021-05-13T02:28:51.047Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲解如何在IDEA中使用 Subversion 做代码版本管理，教你快速学会一些常用操作，例如：检出、提交、更新、查看变更内容等</p><span id="more"></span><p>本文的 SVN 服务端将使用 <a href="https://svnbucket.com/">SVNBucket</a>，如果你没有SVN的服务端，可以先注册一个。</p><h6 id="开启-SVN-版本管理"><a href="#开启-SVN-版本管理" class="headerlink" title="开启 SVN 版本管理"></a>开启 SVN 版本管理</h6><p>打开 IDEA 时，会有一个弹窗，如果我们还没有检出代码，可以选择从 SVN 获取代码<br><img src="43nwBmflkKotRIg.jpg" alt="选择使用版本.jpg"></p><p>注意这里要选择 Subversion 也就是 SVN，然后添加我们的仓库地址，确定。然后就可以把我们在SVN仓库里的代码检出了。<br><img src="e2uw1iTF3JKHcX8.jpg" alt="添加地址检出.jpg"></p><p>在检出时，可能会弹出以下弹窗，我们要选择1.8版本以上<br><img src="WxZJmkvjV78bOan.jpg" alt="选择使用版本.jpg"></p><p>如果你的项目代码一早就使用其他 SVN 客户端检出了，那我们可以用 IDEA 打开这个项目，然后开启 SVN 管理，如下图：<br><img src="VlNtenzRs9okbxY.jpg" alt="开启svn版本管理.jpg"><br>注意开启时，我们要选择使用 Subvesion<br><img src="kDzQLfW1KZ4EcXG.jpg" alt="选择使用版本.jpg"></p><h6 id="SVN-常用操作"><a href="#SVN-常用操作" class="headerlink" title="SVN 常用操作"></a>SVN 常用操作</h6><p>如果你能看到如下图的图标，说明你已经成功集成了 SVN 版本管理，在这里我们可以非常方便的进行代码的更新、提交、查看提交记录等操作<br><img src="DraJp3TtLNMOiKq.jpg" alt="idea工作栏直接操作svn"></p><p>点击提交代码，最上面是本地变更的文件列表，默认是打勾的，如果你不想提交某个文件，可以把勾去掉。<br>中间是填写提交描述内容，方便别人知道你本次提交的内容，这个会在我们查看提交历史时显示出来。<br>底部显示了我们选中文件的diff，会高亮显示变动的行<br>另外如果有需要我们可以勾选<code>Auto update after commit</code>，这样在每次提交成功后会自动更新下本地代码<br><img src="9Br3wDfgOA1Yi52.jpg" alt="idea提交代码.jpg"></p><p>另外在idea的左下角也会多一个Subversion的tab，我们可以在这里看到更多信息<br>如下图，<code>Local Changes</code>显示的是本地的一些变动内容：<br><img src="zv9K6j3YGou7mIb.jpg" alt="idea本地变更.jpg"></p><p>在这里，我们可以快速的查看到我们本地修改了什么文件，每个文件改了什么内容，并且有高亮显示修改的行，还能快速撤销修改，提交代码，非常的方便。<br>有个功能叫文件暂存，可能很多人没用过，它是可以把我们的本地代码修改暂时放到一个暂存区，不用提交到SVN服务端，等我们完成工作后再恢复过来。<br>典型的一个应用就是有时候你改了很多代码，代码跑不起来，但是需要紧急发个版本或者修复一个bug，这时候你不方便提交代码，就可以选择暂存你本地修改过的代码到置物架，等你修复完bug后再来恢复你的代码，想了解更多，这里有个<a href="https://www.bilibili.com/video/BV1k4411m7mP?p=7">视频教程</a></p><p>第二个tab<code>Repository</code>显示的是我们的一些提交记录，如下图：<br><img src="AbgPJUCsTfknBGq.jpg" alt="idea显示svn的提交历史记录.jpg"></p><p>第三个tab<code>Incoming</code>在有新的内容可以更新时会显示出来，会列出来我们还未更新的一些提交记录，可以快速预览下，非常方便</p><p>第四个tab显示的是我们工作区的一些信息，这里有个我们常用的功能，就是清理工作区，在我们工作区出现一些问题时，这个清理经常用到<br><img src="Kw4Oqpkc7hoIxZ1.jpg" alt="idea清理工作区"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文讲解如何在IDEA中使用 Subversion 做代码版本管理，教你快速学会一些常用操作，例如：检出、提交、更新、查看变更内容等&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>svn常见问题</title>
    <link href="https://svnbucket.com/posts/svn-problems/"/>
    <id>https://svnbucket.com/posts/svn-problems/</id>
    <published>2021-04-29T10:29:42.000Z</published>
    <updated>2022-02-03T13:09:54.983Z</updated>
    
    <content type="html"><![CDATA[<p>SVNBucket 的一些常见问题</p><span id="more"></span><h6 id="如何删除项目"><a href="#如何删除项目" class="headerlink" title="如何删除项目"></a>如何删除项目</h6><p>项目详情页，设置页面可以删除项目</p><h6 id="如何删除文件"><a href="#如何删除文件" class="headerlink" title="如何删除文件"></a>如何删除文件</h6><p>无法直接在网站上删除，需要电脑上删除，然后提交</p><h6 id="为什么删除了文件，空间没有减少"><a href="#为什么删除了文件，空间没有减少" class="headerlink" title="为什么删除了文件，空间没有减少"></a>为什么删除了文件，空间没有减少</h6><p>SVN 会记住所有的历史纪录，即使你删除了文件，它实际上还存在历史版本中，所以占用空间并不会减小，只有把整个项目删除才可以释放空间</p><h6 id="为什么空间超额后无法删除文件？"><a href="#为什么空间超额后无法删除文件？" class="headerlink" title="为什么空间超额后无法删除文件？"></a>为什么空间超额后无法删除文件？</h6><p>删除文件也是提交，超额是无法再提交文件的，另外删除文件是不会减小空间的哦</p><h6 id="删除了项目为什么我的空间没有变小"><a href="#删除了项目为什么我的空间没有变小" class="headerlink" title="删除了项目为什么我的空间没有变小"></a>删除了项目为什么我的空间没有变小</h6><p>删除项目，服务器需要把全部文件删除，需要点时间，项目越大，所需时间就越长，请耐心等待下再刷新喔</p><h6 id="可以开发票吗"><a href="#可以开发票吗" class="headerlink" title="可以开发票吗"></a>可以开发票吗</h6><p>可以的（100元以上），购买后请联系客服，我们暂时只支持电子发票，请在购买后一个月内联系开票。</p><h6 id="怎么购买"><a href="#怎么购买" class="headerlink" title="怎么购买"></a>怎么购买</h6><p>点击右上角自己的头像，就可以看到购买空间了</p><h6 id="空间是什么意思"><a href="#空间是什么意思" class="headerlink" title="空间是什么意思"></a>空间是什么意思</h6><p>指的是存储空间，是所有项目的总空间</p><h6 id="怎么上传已有代码"><a href="#怎么上传已有代码" class="headerlink" title="怎么上传已有代码"></a>怎么上传已有代码</h6><p>先checkout，然后把之前代码放入checkout后的目录，提交，更多详细教程请看：<a href="/posts/svn-tutorial/">SVN使用教程</a></p><h6 id="忘记密码怎么办"><a href="#忘记密码怎么办" class="headerlink" title="忘记密码怎么办"></a>忘记密码怎么办</h6><p>到登陆页面，点击忘记密码</p><h6 id="忘记用户名怎么办"><a href="#忘记用户名怎么办" class="headerlink" title="忘记用户名怎么办"></a>忘记用户名怎么办</h6><p>到登陆页面，点击忘记密码，输入邮箱找回<br>如果有checkout过项目，查看项目svn地址，地址里面有你的用户名</p><h6 id="怎么添加用户"><a href="#怎么添加用户" class="headerlink" title="怎么添加用户"></a>怎么添加用户</h6><p>项目详情页-项目成员，可以添加项目成员，需要对方也注册了<code>SVNBucket</code>账号才能添加</p><h6 id="我的上传速度很慢？"><a href="#我的上传速度很慢？" class="headerlink" title="我的上传速度很慢？"></a>我的上传速度很慢？</h6><p>我们的上传带宽是200M的，理论上可以达到20M/S的速度，但是还有几个因素会影响速度，如果你是一次性上传大量的文件，比如2000个文件，SVN客户端在上传之前需要对文件进行读取、压缩、写入、上传等一系列操作，大量的IO操作会导致速度大大下降；如果你只是上传一个文件（不管多大），速度就会非常块，你可以亲自试下喔。</p><h6 id="Eclipse-报错-“cannot-negotiate-authentication-mechanism”"><a href="#Eclipse-报错-“cannot-negotiate-authentication-mechanism”" class="headerlink" title="Eclipse 报错 “cannot negotiate authentication mechanism”"></a>Eclipse 报错 “cannot negotiate authentication mechanism”</h6><p>在 Eclipse-&gt;window-&gt;preference-&gt;team-&gt;svn 中将 svn 接口设定为 svnkit。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SVNBucket 的一些常见问题&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Apache + SVN服务器搭建</title>
    <link href="https://svnbucket.com/posts/install-svn-apache/"/>
    <id>https://svnbucket.com/posts/install-svn-apache/</id>
    <published>2021-04-25T06:07:50.000Z</published>
    <updated>2021-04-25T06:53:53.279Z</updated>
    
    <content type="html"><![CDATA[<p>SVN 是最流行的版本管理软件之一，可以为源码或者文档记录每次的修改记录，是开发团队协作必备的工具。<br>这篇文档，我们将讲解如何使用Apache来搭建SVN服务端，Linux服务器我们使用CentOS 7为例，其他Linux版本操作也差不多。</p><span id="more"></span><blockquote><p>如果你闲搭建自己的SVN服务端以及配置比较麻烦，推荐你使用 <a href="https://svnbucket.com/">SVNBucket</a>，提供了可视化的操作界面，所有操作都变得非常简单</p></blockquote><h6 id="第一步，安装-Apache"><a href="#第一步，安装-Apache" class="headerlink" title="第一步，安装 Apache"></a>第一步，安装 Apache</h6><p>使用 yum 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd</span><br></pre></td></tr></table></figure><h6 id="第二步，安装-Subversion-和-mod-dav-svn-模块"><a href="#第二步，安装-Subversion-和-mod-dav-svn-模块" class="headerlink" title="第二步，安装 Subversion 和 mod_dav_svn 模块"></a>第二步，安装 Subversion 和 mod_dav_svn 模块</h6><p>CentOS 7 默认的源安装的 svn 是比较旧的版本，我们使用 wandisco 源安装SVN1.9版本。<br>新建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;yum.repos.d&#x2F;wandisco-svn.repo</span><br></pre></td></tr></table></figure><p>写入源内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">WandiscoSVN</span>]</span><br><span class="line"><span class="string">name=Wandisco</span> <span class="string">SVN</span> <span class="string">Repo</span></span><br><span class="line"><span class="string">baseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.9/RPMS/$basearch/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br></pre></td></tr></table></figure><p>删除旧版本（如果存在）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum remove subversion*</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>开始安装 Subversion</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure><p>为了Apache能提供SVN服务，我们还需要安装一个Apache的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mod_dav_svn</span><br></pre></td></tr></table></figure><h6 id="第三步，Apache配置SVN"><a href="#第三步，Apache配置SVN" class="headerlink" title="第三步，Apache配置SVN"></a>第三步，Apache配置SVN</h6><p>修改svn配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;httpd&#x2F;conf.modules.d&#x2F;10-subversion.conf</span><br></pre></td></tr></table></figure><p>文件内容应该如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LoadModule dav_svn_module     modules&#x2F;mod_dav_svn.so</span><br><span class="line">LoadModule authz_svn_module   modules&#x2F;mod_authz_svn.so</span><br><span class="line">LoadModule dontdothat_module  modules&#x2F;mod_dontdothat.so</span><br></pre></td></tr></table></figure><p>我们配置一个/svn的访问路径，新增以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location &#x2F;svn&gt;</span><br><span class="line">DAV svn</span><br><span class="line">SVNParentPath &#x2F;svn</span><br><span class="line">AuthName &quot;SVN Repos&quot;</span><br><span class="line">AuthType Basic</span><br><span class="line">AuthUserFile &#x2F;etc&#x2F;svn&#x2F;svn-auth</span><br><span class="line">AuthzSVNAccessFile &#x2F;svn&#x2F;authz</span><br><span class="line">Require valid-user</span><br><span class="line">&lt;&#x2F;Location&gt;</span><br></pre></td></tr></table></figure><p>注意：上面我们指定了svn的授权文件<code>/svn/authz</code>和用户密码配置文件<code>/etc/svn/svn-auth</code>，后面我们将创建这两个文件。</p><h6 id="第四步，创建SVN仓库"><a href="#第四步，创建SVN仓库" class="headerlink" title="第四步，创建SVN仓库"></a>第四步，创建SVN仓库</h6><p>创建仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /svn</span><br><span class="line"><span class="built_in">cd</span> /svn</span><br><span class="line">sudo svnadmin create repo1</span><br><span class="line">sudo chown -R apache:apache repo1</span><br></pre></td></tr></table></figure><p>创建用户帐号<code>user001</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;etc&#x2F;svn</span><br><span class="line">sudo htpasswd -cm &#x2F;etc&#x2F;svn&#x2F;svn-auth user001</span><br><span class="line">sudo chown root:apache &#x2F;etc&#x2F;svn&#x2F;svn-auth</span><br><span class="line">sudo chmod 640 &#x2F;etc&#x2F;svn&#x2F;svn-auth</span><br></pre></td></tr></table></figure><p>如果需要创建更多帐号，参考以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo htpasswd -m &#x2F;etc&#x2F;svn&#x2F;svn-auth user002</span><br><span class="line">sudo htpasswd -m &#x2F;etc&#x2F;svn&#x2F;svn-auth user003</span><br></pre></td></tr></table></figure><blockquote><p>注意“-c”参数是表示创建文件，如果文件已经存在了，就不要再使用这个参数</p></blockquote><p>创建权限配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp &#x2F;svn&#x2F;repo1&#x2F;conf&#x2F;authz &#x2F;svn&#x2F;authz</span><br><span class="line">sudo vi &#x2F;svn&#x2F;authz</span><br></pre></td></tr></table></figure><p>假设：<br>user001 是作为管理员<br>user002 是测试人员，拥有”repo1”仓库的读写权限<br>user003 是实习生，只有”repo1”仓库的读权限<br>我们的配置文件内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分组</span></span><br><span class="line">[groups]</span><br><span class="line">admin=user001</span><br><span class="line">repo1_user=user002</span><br><span class="line">repo1_trainee=user003</span><br><span class="line"></span><br><span class="line">[/]</span><br><span class="line">@admin=rw</span><br><span class="line"></span><br><span class="line">[repo1:/]</span><br><span class="line">@repo1_user=rw</span><br><span class="line">@repo1_trainee=r</span><br></pre></td></tr></table></figure><h6 id="第五步，启动-Apache-服务，修改防火墙"><a href="#第五步，启动-Apache-服务，修改防火墙" class="headerlink" title="第五步，启动 Apache 服务，修改防火墙"></a>第五步，启动 Apache 服务，修改防火墙</h6><p>启动apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start httpd.service</span><br><span class="line">sudo systemctl enable httpd.service</span><br></pre></td></tr></table></figure><p>开启http服务端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --zone&#x3D;public --permanent --add-service&#x3D;http</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>最后，我们就可以使用下面的地址访问到我们的svn仓库了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&lt;your-server-ip&gt;&#x2F;svn&#x2F;repo1&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;SVN 是最流行的版本管理软件之一，可以为源码或者文档记录每次的修改记录，是开发团队协作必备的工具。&lt;br&gt;这篇文档，我们将讲解如何使用Apache来搭建SVN服务端，Linux服务器我们使用CentOS 7为例，其他Linux版本操作也差不多。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN的生命周期</title>
    <link href="https://svnbucket.com/posts/svn-life-cycle/"/>
    <id>https://svnbucket.com/posts/svn-life-cycle/</id>
    <published>2021-04-21T07:03:47.000Z</published>
    <updated>2021-04-21T07:42:49.090Z</updated>
    
    <content type="html"><![CDATA[<p>讲解 SVN 从创建到结束的完整流程是怎样的，包括创建 SVN 仓库，checkout检出代码，提交代码，更新代码等</p><span id="more"></span><h6 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h6><p>仓库是开发者存储他们代码的中心，仓库里不仅存储了提交的文件，还需要存储每次的修改变动记录，也就是要维护文件的每次修改记录。<br>我们使用<code>svnadmin create xxx</code>来创建一个仓库，这个只需要做一次。</p><h6 id="检出-Checkout"><a href="#检出-Checkout" class="headerlink" title="检出 Checkout"></a>检出 Checkout</h6><p>检出就是把服务器上的代码下载到自己电脑上，我们电脑上的这份拷贝内容称之为工作空间，是每个开发人员自己的工作目录，在这里你可以对代码进行修改，之后可以把自己的改动提交到服务端。<br>通常这个操作也只需要一次，后续都是update操作，除非你的工作目录被破坏了，你可以删除目录重新checkout</p><h6 id="更新-Update"><a href="#更新-Update" class="headerlink" title="更新 Update"></a>更新 Update</h6><p>更新是把服务器上的代码同步到本地，如果有其他开发者提交了代码，这个操作之后我们就获取到了他提交的代码。<br>日常开发中，我们应该经常 update 下代码，及时同步别人的修改内容。<br>如果长时间不更新，可能会跟服务器上的代码差异很大，这时候更新产生冲突的可能性就大了很多，而且累计更新很多东西时，你解决冲突也是比较麻烦的，你需要从一堆变动中了解如何合并才是正确的。</p><h6 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h6><p>在检出代码后，我们就可以在自己电脑上开发功能、修改代码了。<br>修改也分为很多种，添加新文件我们称之为add，另外还有删除 remove，修改 modify。<br>新添加的文件/目录刚开始时补属于版本管理中的部分的，我们需要通过add操作把这些文件加入版本管理。<br>在本地删除文件/目录后，只是在我们的工作目录删除了，我们需要把这个删除变动提交到 SVN 服务端，这样文件才是真的从版本库删除了，这样其他人更新的时候才会同步删除那个文件。</p><h6 id="检查变动"><a href="#检查变动" class="headerlink" title="检查变动"></a>检查变动</h6><p>当你改动你工作目录的代码后，你本地的代码就跟服务器上的产生了差异，在提交代码前进行一下改动检查是非常有必要的。<br>我们可以点击 TortoiseSVN 的提交，在提交窗口会列出来变动的文件列表，双击具体的文件就可以展示差异diff了。<br>这样我们可以确认下自己的改动是否正确，有时候不小心改动到了一些不相关的代码，这个检查方式能很好的帮你发现问题。</p><h6 id="丢弃修改"><a href="#丢弃修改" class="headerlink" title="丢弃修改"></a>丢弃修改</h6><p>假设你提交检查diff时，发现某个文件的改动是错误的，我们想要撤销改动怎么办呢？直接右键选择 revert 就可以撤销本地修改了。<br>撤销本地修改后回到了修改前的样子<br><a href="https://www.bilibili.com/video/BV1k4411m7mP?p=3">撤销修改视频教程</a></p><h6 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h6><p>多人工作时，产生冲突有时候是难免的，多个人同时修改了同个文件的同一行，这种时候 SVN 就不知道到底谁的修改是正确的了，需要我们手动的去解决冲突。<br>日常多更新代码，多提交自己的变动到服务端，保持本地代码尽量跟其他人的是同步的，就不那么容易产生冲突了。<br><a href="https://www.bilibili.com/video/BV1k4411m7mP?p=5">SVN解决冲突视频教程</a></p><h6 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h6><p>在提交前进行变动的检查，查看diff前面已经说过了，是很有必要的。<br>等这些工作完成后，我们就可以把代码提交到 SVN 服务端了，SVN服务端是只有一个中心的，提交后大家都能更新到你的代码。<br>Git是分布式的，它的代码提交实际上只是提交到了自己本地的仓库，还需要push后才会推到服务端，其他人才能更新到他的代码，操作流程上比 SVN 复杂很多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;讲解 SVN 从创建到结束的完整流程是怎样的，包括创建 SVN 仓库，checkout检出代码，提交代码，更新代码等&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Subversion简介和指引</title>
    <link href="https://svnbucket.com/posts/subversion-guide/"/>
    <id>https://svnbucket.com/posts/subversion-guide/</id>
    <published>2021-04-20T03:23:55.000Z</published>
    <updated>2021-04-20T05:32:16.669Z</updated>
    
    <content type="html"><![CDATA[<p>Subversion(也叫SVN)是最流行的版本管理软件之一，最早是在2000年由 CollabNet 公司发布，作为CVS的更好替代，迅速的流行了起来。</p><span id="more"></span><h6 id="Subversion简介"><a href="#Subversion简介" class="headerlink" title="Subversion简介"></a>Subversion简介</h6><p>有非常多的大型项目都在使用它做代码版本管理，包括Apache Software Foundation，Free Pascal, FreeBSD, GCC, Mono, SourceForge。<br>因为有文件级的权限控制，成为企业代码安全管理的唯一选择。</p><p>如果一个开发团队不使用版本管理软件，管理代码将会是个灾难。<br>试想，任何人任何时间都能随意修改代码，而且没有记录，那我们如何找回昨天写的代码，如何查询某行代码是谁写的，发生bug如何找到代码编写人？</p><p>SVN 可以管理和记录你代码的所有改动，不管你有多少文件，改动多少次，有多少人参与改动，都能一一记录，并且随时能找回之前的代码，还能确保你的代码不被删除，保证公司代码的安全。</p><p>SVN的数据存储在服务器上，我们叫它为仓库（Repostory），这里记录了你所有文件的改动，包括完整的修改历史记录。<br>开发人员在他们的电脑上使用SVN的客户端跟服务端进行交互，可以随时查看到文件列表，修改记录，同步其他人的修改。<br>每次提交变动到服务器都会记录为一个版本号，我们可以通过历史看到这次提交的内容，变动了哪些文件，哪些行。</p><p>你可以通过分支功能来管理你软件的不同版本，通常我们把trunk目录称作主干分支，其他分支我们存储到branches目录，可以用来保存v1.0、v2.0这样的不同软件版本。</p><h6 id="为什么使用-Subversion"><a href="#为什么使用-Subversion" class="headerlink" title="为什么使用 Subversion"></a>为什么使用 Subversion</h6><p>SVN 跟 Git 比起来有很多优势。<br>SVN 的文件是存储到一个统一的中心化服务器，而 Git 则是在每个人的电脑上都复制了一份完整的仓库，这让SVN更有利于项目的扩展。<br>假设一个项目达到上百G后，Git需要每个开发人员的电脑都要复制这上百G的数据，显然非常的不合理，而 SVN 则可以根据需要，只检出自己需要的目录，不用浪费自己电脑的磁盘空间和传输带宽。</p><p>SVN 对新手非常友好，上手容易，没有基础的用户也能快速学会并在工作中使用起来，而Git往往需要花费非常多的时间来学习它复杂的概念、命令、操作。</p><p>SVN 有文件级的权限控制，可以设置什么人有什么文件的权限，这对企业代码安全来说是非常重要的，而 Git 因为是每个人电脑上都有完整的复制，根本没法做权限控制。</p><p>另外 SVN 对二进制文件更加友好，占用的空间更好，因为它有独特的二进制diff算法，而Git对待二进制文件则很不友好，占用空间会非常大。</p><p><a href="/posts/svn-vs-git-difference/">查看更多SVN 和 Git的差异对比</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Subversion(也叫SVN)是最流行的版本管理软件之一，最早是在2000年由 CollabNet 公司发布，作为CVS的更好替代，迅速的流行了起来。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN和Git的真相与误解</title>
    <link href="https://svnbucket.com/posts/svn-vs-git-difference/"/>
    <id>https://svnbucket.com/posts/svn-vs-git-difference/</id>
    <published>2021-04-16T05:59:52.000Z</published>
    <updated>2021-05-07T08:42:16.305Z</updated>
    
    <content type="html"><![CDATA[<p>网上有非常多的SVN和Git的比较，但是很多都是错误的，下面我们就来列举下那些常见的错误认识，以及svn和git的一些区别，他们有什么优缺点，以便让你更好的理解SVN和Git的当前真实情况，为你的团队挑选合适的工具。</p><span id="more"></span><h6 id="Git仓库远比SVN仓库占用空间小"><a href="#Git仓库远比SVN仓库占用空间小" class="headerlink" title="Git仓库远比SVN仓库占用空间小"></a>Git仓库远比SVN仓库占用空间小</h6><div class="tip">    错误</div><p>SVN和Git的差异算法虽然有很多地方的不同，但是最终他们的数据存储都是相同的。最终的情况就是，同样的文件，它们两个存储所占用的空间大小非常相近。<br>但是当存储的文件大多是二进制文件时（例如，图片、安装包等）SVN存储所占用的空间反而会比Git的小很多，这是因为SVN所使用的<a href="https://en.wikipedia.org/wiki/Xdelta">差异算法</a>能同时应用到二进制文件和文本文件中</p><p><img src="https://i.loli.net/2021/04/06/tybpauoMGz6Jfv5.jpg" alt="svn和git的存储空间大小比较"></p><p>我们测试了WordPress的开源代码，分别使用SVN和Git存储，最终SVN的占用空间是186MB，Git的是169MB，相差只有17MB，<a href="https://svnvsgit.com/#repository-size-benchmarks">具体数据</a></p><h6 id="创建分支在SVN中非常的重"><a href="#创建分支在SVN中非常的重" class="headerlink" title="创建分支在SVN中非常的重"></a>创建分支在SVN中非常的重</h6><div class="tip">    错误，已经是过时的</div>在很多人印象里，SVN创建分支就是多复制了一份代码，需要非常多的空间和时间。事实上，从1.0版本（基本已经没人在用这么低的版本了），创建分支的算法已经改变了，分支变得非常的轻量。即使是非常大的项目中，你也可以随时创建分支来修复一个bug或开发一个新的功能。<p>我们用 WordPress 的源码对SVN和Git创建分支进行了测试，SVN在创建分支后增长了1308字节的空间占用，Git增加了360字节的空间占用，创建时间上，SVN消耗了0.093秒，Git花费了0.031秒。<a href="https://svnvsgit.com/#branch-creation-benchmarks">详细信息</a></p><h6 id="SVN每个目录都会有一个-svn的隐藏目录"><a href="#SVN每个目录都会有一个-svn的隐藏目录" class="headerlink" title="SVN每个目录都会有一个.svn的隐藏目录"></a>SVN每个目录都会有一个.svn的隐藏目录</h6><div class="tip">    错误，已经是过时的</div><p>从1.7版本（在2011年发布）之后，已经变成了只会在根目录下存在.svn目录</p><h6 id="没人再使用SVN了"><a href="#没人再使用SVN了" class="headerlink" title="没人再使用SVN了"></a>没人再使用SVN了</h6><div class="tip">    错误</div><p>SVN还有非常多的公司和团队在用，OPPO、网易、Google等各类互联网大公司都在使用。因为SVN拥有Git无法替代的优势：文件级权限控制<br>对于公司和团队来说，代码的安全尤其重要，要针对不同职位的人员设置代码的可见范围，SVN的文件级权限控制完美的符合了公司的安全性要求，所以对于看重数据安全的公司来说，SVN是唯一的选择。<br>Git则是开源项目使用的更多，因为它在每个人的电脑上都存在一份完整的仓库代码，导致无法进行权限控制，也无法像SVN那样只检出部分目录的代码。</p><h6 id="分布式的-Git-比集中式的-SVN-更优越"><a href="#分布式的-Git-比集中式的-SVN-更优越" class="headerlink" title="分布式的 Git 比集中式的 SVN 更优越"></a>分布式的 Git 比集中式的 SVN 更优越</h6><div class="tip">    错误，看情况而定</div><p>分布式只是实现版本控制的另外一种方法。集中式和分布式都有他们的优缺点，我们应该根据实际情况来判断使用哪个更好。<br>分布式的缺点：没有权限控制；每个人都需要完全 clone 整个仓库，没法像 SVN 可以只 checkout 需要的子目录；没法锁定文件等等问题</p><h6 id="Git-更适合大项目"><a href="#Git-更适合大项目" class="headerlink" title="Git 更适合大项目"></a>Git 更适合大项目</h6><div class="tip">    错误，大项目Git需要分割成多个小的仓库</div><p>实际上Git并不适合用来存储大的项目，因为Git需要每个人都clone完整的仓库到自己电脑，2G的代码或许没什么问题，但是如果仓库到了10几G，几百G后，这会是一个非常大的问题。通常这就需要把一个大的仓库才分为多个小的仓库了。但是这就导致了其他几个问题：你需要管理多个仓库；破坏了原有项目的完整性；没法继续跟他们一起使用分支；<br>相反，SVN则没有仓库大小的限制和担心，因为我们可以按需只检出需要的目录。例如Apache的所有项目都是存储在一个仓库里，这完全没有问题。<br>更多阅读：<a href="https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext">Google为什么存储百万行代码在一个仓库中</a></p><h6 id="Git-有灵活强大的命令行操作"><a href="#Git-有灵活强大的命令行操作" class="headerlink" title="Git 有灵活强大的命令行操作"></a>Git 有灵活强大的命令行操作</h6><div class="tip">    正确，但是对新人并不友好</div>Git的设计初衷就是一套低级版本控制系统，允许高级用户通过命令玩一些黑科技，但是这并不安全，对初学者也不友好。Git 也因为没有良好的设计和混乱的命令受到了一些指责：这导致加长了学习曲线和大大增加了公司和团队的成本，特别是大型团队以及团队成员水平不一的情况。比如美术、策划、开发、这类人员，技术水平线不一。学会Git可能需要一个月，而学会SVN可能只需要1个小时<h6 id="Git-对二进制文件存储不友好"><a href="#Git-对二进制文件存储不友好" class="headerlink" title="Git 对二进制文件存储不友好"></a>Git 对二进制文件存储不友好</h6><div class="tip">    正确</div>Git 因为分布式原因，无法很好的处理二进制文件，他是基于复制模式来管理的，所以并不适合有很多二进制文件的项目，比如图片多的项目。]]></content>
    
    
    <summary type="html">&lt;p&gt;网上有非常多的SVN和Git的比较，但是很多都是错误的，下面我们就来列举下那些常见的错误认识，以及svn和git的一些区别，他们有什么优缺点，以便让你更好的理解SVN和Git的当前真实情况，为你的团队挑选合适的工具。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN 钩子介绍</title>
    <link href="https://svnbucket.com/posts/svn-hooks-introduce/"/>
    <id>https://svnbucket.com/posts/svn-hooks-introduce/</id>
    <published>2021-04-12T06:50:42.000Z</published>
    <updated>2021-05-13T02:25:10.082Z</updated>
    
    <content type="html"><![CDATA[<p>钩子是什么，有什么用？SVN有哪些钩子，可以用来做什么，本篇将为大家解答。</p><span id="more"></span><p>SVN 钩子，英文叫 hooks ，钩子这个说法可能有些人觉得太玄乎，实际上它就是一个回调而已，当某个事件发生后会回调告诉你。</p><blockquote><p>本篇讲解的是如何在 Linux 服务器上配置钩子，如果你是使用 SVNBucket 则可以在 web 端进行可视化配置钩子，参考<a href="/posts/svn-hooks-tutorial/">SVNBucket钩子配置教程</a></p></blockquote><p>SVN的钩子有很多，他们存放在服务端的<code>/hooks</code>目录:<br><img src="RXiOtfcb28Wk6ox.jpg" alt="svn hooks 钩子目录文件列表"></p><p>上图中，我们看到文件后缀都是以<code>.tmpl</code>结尾，这些是模版文件，都是不会生效的，如果你想要某个钩子生效，只需要把<code>.tmpl</code>去掉就可以了。<br>他们都是 shell 脚本，如果是在windows上，则这个脚本的后缀应该是 exe/bat</p><p>虽然上图中有9个钩子脚本，但是常用的只有两个：</p><ol><li>提交代码前触发的钩子<code>pre-commit</code></li><li>提交代码后触发的钩子<code>post-commit</code></li></ol><p>提交前的钩子，最经典的应用就是用来检查是否有填写提交描述（commit log），</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是仓库地址，更多的钩子环境变量还可以在 /conf/hooks-env 里面配置</span></span><br><span class="line">REPOS=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="comment"># 版本号，subversion里面专用的，跟我们看到的那个版本号不一样</span></span><br><span class="line">TXN=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否有填写提交描述，没有则不给提交并提示</span></span><br><span class="line">SVNLOOK=/usr/bin/svnlook</span><br><span class="line">msg=$(<span class="variable">$SVNLOOK</span> <span class="built_in">log</span> -t <span class="string">&quot;<span class="variable">$TXN</span>&quot;</span> <span class="string">&quot;<span class="variable">$REPOS</span>&quot;</span> | grep <span class="string">&quot;[a-zA-Z0-9]&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$msg</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 这行错误提示将会在svn客户端显示</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;必须填写提交描述&quot;</span>&gt;&amp;2;</span><br><span class="line">    <span class="comment"># 有错误，不允许提交，则返回非0错误吗</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Exit on all errors.</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部检查都通过，则返回错误码0允许提交，</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>如果你使用的是 TortoiseSVN 客户端，提示大概如下：<br><img src="sfY1w35B7yF4hVe.jpg" alt="svn pre-commit钩子未填写提交描述的错误提示"></p><p>而提交后的钩子（post-commit）最经典的应用就是自动化更新服务器代码。<br>例如在代码提交后，我们可以判断提交描述中是否有<code>update</code>，有则自动更新服务器上的代码并且重启服务器以便立刻生效，这个在开发中是非常有用的，可以节省大量的繁琐操作。</p><p>通常我们的 SVN 仓库跟我们的 web/app 服务器不在同个服务器上。所以我们可以配置钩子调用我们的一个 http 接口通知更新，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仓库路径</span></span><br><span class="line">REPOS=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="comment"># 仓库版本号，这个是跟我们客户端看到的版本号是一致的。</span></span><br><span class="line">REV=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">TXN_NAME=<span class="string">&quot;<span class="variable">$3</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码提交后，我们调用这个 http 接口，具体的逻辑由这个接口去处理</span></span><br><span class="line">curl -s -X POST -d <span class="string">&quot;repos=<span class="variable">$1</span>&amp;rev=<span class="variable">$2</span>&quot;</span> <span class="string">&quot;http://your-server-url/api/post-commit&quot;</span></span><br></pre></td></tr></table></figure><p>你需要提供一个 http 接口，这个接口在收到调用后判断是否需要更新，然后可以执行 <code>svn update</code> 命令去更新你的代码目录，然后执行重启服务的命令。<br>如果你不会编写 http 接口，可以参考下 <a href="/posts/svn-hooks-tutorial/">SVNBucket钩子配置教程</a> ，里面提供更新、重启代码</p><p>在上面的钩子脚本中，我们给接口传递了 repos 和 rev 参数，没有提交描述，这样就没办判断否包含<code>update</code>字符来决定是否更新服务器。<br>要获得提交描述也很简单，我们在脚本中调用 svnlook 命令去获取描述内容就可以，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 仓库路径</span></span><br><span class="line">REPOS=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="comment"># 仓库版本号，这个是跟我们客户端看到的版本号是一致的。</span></span><br><span class="line">REV=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">TXN_NAME=<span class="string">&quot;<span class="variable">$3</span>&quot;</span></span><br><span class="line"><span class="built_in">log</span>=$(<span class="variable">$SVNLOOK</span> <span class="built_in">log</span> -t <span class="string">&quot;<span class="variable">$REV</span>&quot;</span> <span class="string">&quot;<span class="variable">$REPOS</span>&quot;</span> | grep <span class="string">&quot;[a-zA-Z0-9]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加log参数，在 http 接口中我们可以判断是否包含update字符</span></span><br><span class="line">curl -s -X POST -d <span class="string">&quot;repos=<span class="variable">$1</span>&amp;rev=<span class="variable">$2</span>&amp;log=log&quot;</span> <span class="string">&quot;http://your-server-url/api/post-commit&quot;</span></span><br></pre></td></tr></table></figure><p>还有更高级的判断方式是，判断提交者是否为指定用户、是否更新了某个文件/目录。<br>这需要调用更多的命令去查询这些信息，这里我们就不再深入了。<br>你也可以使用 <a href="https://svnbucket.com/">SVNBucket</a>，它提供了可视化的钩子配置界面，可以判断提交者、提交描述、变动文件，请参考 <a href="/posts/svn-hooks-tutorial/">SVNBucket钩子配置教程</a></p><p><img src="cBxz1x.md.jpg" alt="svnbucket 添加钩子"><br>可配置多个触发链接，可查看触发log，可暂停<br><img src="vAPiw7zY364lrFb.jpg" alt="svnbucket钩子列表"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;钩子是什么，有什么用？SVN有哪些钩子，可以用来做什么，本篇将为大家解答。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN服务器搭建配置教程</title>
    <link href="https://svnbucket.com/posts/svnserve-tutorial/"/>
    <id>https://svnbucket.com/posts/svnserve-tutorial/</id>
    <published>2021-04-09T08:11:03.000Z</published>
    <updated>2021-05-13T02:23:53.309Z</updated>
    
    <content type="html"><![CDATA[<p>本篇讲解如何在 Linux 服务器 CentOS 7 搭建 SVN 服务端，创建 SVN 仓库项目，添加项目成员以及配置用户权限。<br>我们将使用 svnserve 提供 svn 服务（另外还有 <a href="/posts/install-svn-apache/">apache搭建SVN</a> 方式）使用<code>svnadmin</code>创建仓库；</p><span id="more"></span><blockquote><p>如果你闲搭建自己的SVN服务端以及配置比较麻烦，推荐你使用 <a href="https://svnbucket.com/">SVNBucket</a>，提供了可视化的操作界面，所有操作都变得非常简单</p></blockquote><h6 id="服务器上安装-Subversion"><a href="#服务器上安装-Subversion" class="headerlink" title="服务器上安装 Subversion"></a>服务器上安装 Subversion</h6><p>首先我们要安装 SVN 的服务端，Apache Subversion 提供了服务端和客户端。<br>如果你还没安装好 Subversion 请查看 <a href="/posts/centos-install-svn/">SVN服务端安装教程</a></p><h6 id="创建-SVN-仓库"><a href="#创建-SVN-仓库" class="headerlink" title="创建 SVN 仓库"></a>创建 SVN 仓库</h6><p>为确保你已正确安装好 SVN ，请在命令行输入 <code>svnadmin help</code>，如果看到如下内容，说明是没问题的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># svnadmin help</span></span><br><span class="line">general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]</span><br><span class="line">Subversion repository administration tool.</span><br><span class="line">Type <span class="string">&#x27;svnadmin help &lt;subcommand&gt;&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span> on a specific subcommand.</span><br><span class="line">Type <span class="string">&#x27;svnadmin --version&#x27;</span> to see the program version and FS modules.</span><br><span class="line"></span><br><span class="line">Available subcommands:</span><br><span class="line">   crashtest</span><br><span class="line">   create</span><br><span class="line">   delrevprop</span><br><span class="line">   deltify</span><br><span class="line">   dump</span><br><span class="line">   dump-revprops</span><br><span class="line">   freeze</span><br><span class="line">   <span class="built_in">help</span> (?, h)</span><br><span class="line">   hotcopy</span><br><span class="line">   info</span><br><span class="line">   list-dblogs</span><br><span class="line">   list-unused-dblogs</span><br><span class="line">   load</span><br><span class="line">   load-revprops</span><br><span class="line">   lock</span><br><span class="line">   lslocks</span><br><span class="line">   lstxns</span><br><span class="line">   pack</span><br><span class="line">   recover</span><br><span class="line">   rmlocks</span><br><span class="line">   rmtxns</span><br><span class="line">   setlog</span><br><span class="line">   setrevprop</span><br><span class="line">   setuuid</span><br><span class="line">   unlock</span><br><span class="line">   upgrade</span><br><span class="line">   verify</span><br></pre></td></tr></table></figure><p><code>svnadmin</code>是一个服务端的 SVN 管理工具，我们可以用它来创建仓库。<br>我们的仓库通常都会有很多个，所以我们创建一个目录来存放，假设我以<code>/root/repos/</code>作为我的仓库父目录，执行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir repos</span><br></pre></td></tr></table></figure><p>接下来我们创建一个仓库<code>test</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进去repos目录</span></span><br><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line"><span class="comment"># 创建仓库test</span></span><br><span class="line">svnadmin create <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 进入仓库查看文件列表</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>输出如下，表示创建成功，<br><img src="Wo9vd1pTsqMy2m6.jpg" alt="svnadmin 创建svn仓库"></p><p>几个关键目录介绍下<br><code>conf</code>目录是存放配置文件的，配置用户权限，用户账号密码，svnserve配置都在这里配置。<br><code>db</code>这里存放我们平常提交的数据文件，文件内容都是经过处理的，看不懂里面的内容<br><code>hooks</code>这里是存放钩子配置的，暂时不用管这里</p><p>我们的重点是在<code>conf</code>目录，里面几个配置文件如下：<br><code>authz</code> 是权限配置文件，用来配置用户什么路径有读写权限<br><code>hooks-env.tmpl</code> 是钩子环境变量配置文件的模版，我们暂时用不到，可以忽略<br><code>passwd</code> 用来配置用户的帐号密码<br><code>svnserve.conf</code> 是subversion的总配置</p><p>现在我们什么配置都不用修改先，我们先启动 svn 服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动svn服务，-d 表示在后台运行，-r 表示仓库根目录</span></span><br><span class="line">svnserve -d -r /root/repos/</span><br></pre></td></tr></table></figure><p>如果没报错，说明就启动成功了。<br>这时候我们就可以使用 SVN 客户端来检出仓库了。如果你还不会使用 SVN 客户端，可以查看下 <a href="/posts/svn-tutorial/">SVN使用教程</a><br>你会发现任何人都可以检出代码，但是无法提交代码，这是因为 svn 仓库默认就是未登录用户有读取权限。</p><p>接下来我们修改配置，限制只有登录用户才能检出代码，不然太危险了。</p><p>打开<code>test/conf/svnserve.conf</code> 文件，替换内容如下；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">general</span>]</span><br><span class="line"><span class="comment"># 未登录用户无权限</span></span><br><span class="line"><span class="string">anon-access</span> <span class="string">=</span> <span class="string">none</span></span><br><span class="line"><span class="comment"># 已登录用户有读写权限</span></span><br><span class="line"><span class="string">auth-access</span> <span class="string">=</span> <span class="string">write</span></span><br><span class="line"><span class="comment"># 密码配置文件</span></span><br><span class="line"><span class="string">password-db</span> <span class="string">=</span> <span class="string">passwd</span></span><br><span class="line"><span class="comment"># 权限配置文件</span></span><br><span class="line"><span class="string">authz-db</span> <span class="string">=</span> <span class="string">authz</span></span><br></pre></td></tr></table></figure><p>注意，这个文件里面有非常多的注释内容，我上面这个配置内容是简化后的，我们直接把原来的全部删除，替换为我们这个就行了。<br>保存配置后，不需要重启服务器，我们重新checkout下，这时候就会弹出登录界面了，说明配置生效了。</p><p>但是我们还没有用户名密码，接下来我们设置下用户名和密码。<br>打开<code>test/conf/passwd</code>文件，我们增加一个用户名hello，密码123456，最后内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">users</span>]</span><br><span class="line"><span class="comment"># harry = harryssecret</span></span><br><span class="line"><span class="comment"># sally = sallyssecret</span></span><br><span class="line"><span class="string">hello</span> <span class="string">=</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>这时候我们直接去 checkout 会提示没有权限<code>Error Authorization failed</code><br>这是因为我们配置了<code>authz-db = authz</code>，这个表示用户的权限需要读取这个配置文件去判断。<br>如果我们去掉这个配置，则登录用户对整个仓库都有读写权限。</p><p>接下来我们给 hello 用户配置路径权限，打开<code>test/conf/authz</code>文件，写入如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个权限配置文件</span></span><br><span class="line"><span class="comment"># 每行配置一个权限</span></span><br><span class="line"><span class="comment"># 用$authenticated表示所有登录用户</span></span><br><span class="line"><span class="comment"># 用$anonymous表示所有未登录用户</span></span><br><span class="line"><span class="comment"># *号表示任何用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里配置分组，把相同权限的人归为一个组，方便配置权限</span></span><br><span class="line">[<span class="string">groups</span>]</span><br><span class="line"><span class="comment"># 假设我们创建一个开发人员组</span></span><br><span class="line"><span class="comment"># developers = zhangsan,lisi</span></span><br><span class="line"><span class="comment"># 管理员分组</span></span><br><span class="line"><span class="comment"># admin = wangzong,ruhua</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置根目录权限，管理员分组有根目录的读写权限，hello用户只有读权限</span></span><br><span class="line">[<span class="string">test:/</span>]</span><br><span class="line"><span class="string">@admin</span> <span class="string">=</span> <span class="string">rw</span></span><br><span class="line"><span class="string">hello</span> <span class="string">=</span> <span class="string">r</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给开发人员配置服务端源码路径的读写权限，hello有读写权限</span></span><br><span class="line">[<span class="string">test:/server/src</span>]</span><br><span class="line"><span class="string">@developers</span> <span class="string">=</span> <span class="string">rw</span></span><br><span class="line"><span class="string">hello</span> <span class="string">=</span> <span class="string">rw</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把配置文件保存好，这样我们的hello用户就有了根目录<code>/</code>的读权限，并且有了<code>/server/src</code>的读写权限了。<br>另外我们还配置了几个分组，不过那些用户都是假的，需要在<code>passwd</code>文件里先配置这些用户才能使用，这里只是给你演示下如何配置分组</p><p>好了，完整的 SVN 服务端搭建和配置就完成了，日常工作中，如果项目比较多、用户多，会需要经常修改配置文件，要多注意安全，不然容易导致仓库访问不到。<br>你也可以选择使用 <a href="https://svnbucket.com/">SVNBucket</a>， 提供了可视化的配置界面，用户创建、管理，权限配置都是直接在web端操作的，方便安全。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇讲解如何在 Linux 服务器 CentOS 7 搭建 SVN 服务端，创建 SVN 仓库项目，添加项目成员以及配置用户权限。&lt;br&gt;我们将使用 svnserve 提供 svn 服务（另外还有 &lt;a href=&quot;/posts/install-svn-apache/&quot;&gt;apache搭建SVN&lt;/a&gt; 方式）使用&lt;code&gt;svnadmin&lt;/code&gt;创建仓库；&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN的权限配置教程</title>
    <link href="https://svnbucket.com/posts/subversion-authz-conf/"/>
    <id>https://svnbucket.com/posts/subversion-authz-conf/</id>
    <published>2021-04-08T01:00:16.000Z</published>
    <updated>2021-04-08T01:35:37.697Z</updated>
    
    <content type="html"><![CDATA[<p>本篇将讲解如何在Linux服务器上配置SVN仓库的目录权限、人员分组，全部配置都是通过命令在服务端完成。<br>如果你是使用 <a href="https://svnbucket.com/">SVNBucket</a> 则可以通过图形操作界面来完成所有操作。</p><span id="more"></span><p>首先确保你在服务器上已经存在一个SVN的仓库了，我们定位到仓库的<code>/conf</code>目录，这里就是存放配置的地方，这个目录下的几个配置文件介绍如下：<br><code>authz</code> 是权限配置文件，哪个目录有读写权限，设置什么分组，都是在这里配置<br><code>hooks-env.tmpl</code> 是钩子环境变量配置文件的模版，我们暂时用不到，可以忽略<br><code>passwd</code> 用来配置用户的帐号密码<br><code>svnserve.conf</code> 是subversion的总配置，如果你需要登陆并且授权的用户才可以访问，则需要像我样配置这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[general]</span><br><span class="line"># 是否允许未登录的用户访问，none表示不允许</span><br><span class="line">anon-access &#x3D; none</span><br><span class="line"># 登陆后的权限，可写</span><br><span class="line">auth-access &#x3D; write</span><br><span class="line"># 密码配置文件名</span><br><span class="line">password-db &#x3D; passwd</span><br><span class="line"># 权限配置文件名</span><br><span class="line">authz-db &#x3D; authz</span><br></pre></td></tr></table></figure><p>我们着重来看下<code>authz</code>文件如何给每个用户配置不同目录的读写权限，一个经典的配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 分组配置</span><br><span class="line">[groups]</span><br><span class="line">admin &#x3D; zhangsan</span><br><span class="line">developer &#x3D; lisi,wangwu</span><br><span class="line"></span><br><span class="line"># 根目录的权限</span><br><span class="line">[&#x2F;]</span><br><span class="line">zhaokai &#x3D; rw</span><br><span class="line">* &#x3D;</span><br><span class="line"></span><br><span class="line"># 开发人员这个分组分配了&#x2F;src目录权限</span><br><span class="line">[&#x2F;src]</span><br><span class="line">@developer &#x3D; rw</span><br><span class="line">* &#x3D;</span><br></pre></td></tr></table></figure><p>这个配置文件分两类配置，一类是分配配置，第二类是路径权限配置。<br><code>[groups]</code> 表示后面配置的是分组，我们可以把一些权限相同的用户都归为一个组，比如管理员<code>admin</code>，开发人员<code>developer</code>。多个成员要用英文逗号分隔开。<br>除了分组，其他的以中括号括起来的都表示这个仓库中的一个目录，甚至是可以一个文件名，因为SVN是可以支持文件级的权限配置的。<br>上面的配置，我们给<code>zhaokai</code>分配了根目录<code>/</code>的读写权限<code>rw</code>，除了<code>rw</code>，还有只读<code>r</code>，无权限（空）。<br><code>* = </code>是一个特殊的配置，表示除了上面配置的人，其他人都没有权限，这行配置需要放在每个路径配置的最后。<br><code>/src</code>目录我们给开发组的所有成员配置了读写权限，注意这里配置的是一个分组，需要以<code>@</code>符号开头，这个分组你必须先在上面配置过，否则会报错找不到分组。</p><p>好了，权限配置文件就是这么的简单，但是如果你管理的项目比较多，人员多，经常这样修改配置文件是非常危险的，可能稍微不留神就配置错了，从而导致整个仓库无法访问。如果你经常需要管理SVN项目，建议你使用<a href="https://svnbucket.com/">SVNBucket</a> 它提供了可视化的配置界面，不需要到服务器上手动配置这些，方便并且安全。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇将讲解如何在Linux服务器上配置SVN仓库的目录权限、人员分组，全部配置都是通过命令在服务端完成。&lt;br&gt;如果你是使用 &lt;a href=&quot;https://svnbucket.com/&quot;&gt;SVNBucket&lt;/a&gt; 则可以通过图形操作界面来完成所有操作。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CentOS7服务器上安装SVN1.9</title>
    <link href="https://svnbucket.com/posts/centos-install-svn/"/>
    <id>https://svnbucket.com/posts/centos-install-svn/</id>
    <published>2021-04-07T01:01:50.000Z</published>
    <updated>2021-04-08T06:10:05.072Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-设置-yum-源"><a href="#1-设置-yum-源" class="headerlink" title="1. 设置 yum 源"></a>1. 设置 yum 源</h6><p>使用vim创建文件 /etc/yum.repos.d/wandisco-svn.repo 然后添加下面的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">vim /etc/yum.repos.d/wandisco-svn.repo</span><br></pre></td></tr></table></figure><p>写入内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[WandiscoSVN]</span><br><span class="line">name=Wandisco SVN Repo</span><br><span class="line">baseurl=http://opensource.wandisco.com/centos/<span class="variable">$releasever</span>/svn-1.9/RPMS/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><h6 id="2-安装-Subversion-1-9"><a href="#2-安装-Subversion-1-9" class="headerlink" title="2. 安装 Subversion 1.9"></a>2. 安装 Subversion 1.9</h6><p>在开始安装前，我们要先删除你机器上已经存在的svn（如果存在）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum remove subversion*</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p>现在可以使用yum安装了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install subversion</span><br></pre></td></tr></table></figure><h6 id="3-查看svn版本"><a href="#3-查看svn版本" class="headerlink" title="3. 查看svn版本"></a>3. 查看svn版本</h6><p>到这里，我们的svn安装就完成了，我们可以使用下面的命令查看版本号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn --version</span><br></pre></td></tr></table></figure><p>输出结果，看到1.9.7 说明你的安装是成功的了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">svn, version 1.9.7 (r1800392)</span><br><span class="line">   compiled Aug 10 2017, 21:36:06 on x86_64-redhat-linux-gnu</span><br><span class="line"></span><br><span class="line">Copyright (C) 2017 The Apache Software Foundation.</span><br><span class="line">This software consists of contributions made by many people;</span><br><span class="line">see the NOTICE file <span class="keyword">for</span> more information.</span><br><span class="line">Subversion is open <span class="built_in">source</span> software, see http://subversion.apache.org/</span><br><span class="line"></span><br><span class="line">The following repository access (RA) modules are available:</span><br><span class="line"></span><br><span class="line">* ra_svn : Module <span class="keyword">for</span> accessing a repository using the svn network protocol.</span><br><span class="line">  - with Cyrus SASL authentication</span><br><span class="line">  - handles <span class="string">&#x27;svn&#x27;</span> scheme</span><br><span class="line">* ra_local : Module <span class="keyword">for</span> accessing a repository on <span class="built_in">local</span> disk.</span><br><span class="line">  - handles <span class="string">&#x27;file&#x27;</span> scheme</span><br><span class="line">* ra_serf : Module <span class="keyword">for</span> accessing a repository via WebDAV protocol using serf.</span><br><span class="line">  - using serf 1.3.7 (compiled with 1.3.7)</span><br><span class="line">  - handles <span class="string">&#x27;http&#x27;</span> scheme</span><br><span class="line">  - handles <span class="string">&#x27;https&#x27;</span> scheme</span><br><span class="line"></span><br><span class="line">The following authentication credential caches are available:</span><br><span class="line"></span><br><span class="line">* Plaintext cache <span class="keyword">in</span> /root/.subversion</span><br><span class="line">* Gnome Keyring</span><br><span class="line">* GPG-Agent</span><br></pre></td></tr></table></figure><h6 id="4-其他命令"><a href="#4-其他命令" class="headerlink" title="4. 其他命令"></a>4. 其他命令</h6><p>安装完成后，实际上我们在服务器上就拥有了<code>svn</code>的客户端和服务端，像<code>checkout</code>/<code>update</code>这些命令都能使用了，不过你的使用命令来操作，如果你不会svn的命令，可以看下 <a href="/posts/svn-commands-tutorial/">svn命令教程</a><br><code>svn</code>的一些服务端命令也能使用，像创建仓库的<code>svnadmin create</code>也都是可以使用的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h6 id=&quot;1-设置-yum-源&quot;&gt;&lt;a href=&quot;#1-设置-yum-源&quot; class=&quot;headerlink&quot; title=&quot;1. 设置 yum 源&quot;&gt;&lt;/a&gt;1. 设置 yum 源&lt;/h6&gt;&lt;p&gt;使用vim创建文件 /etc/yum.repos.d/wandisco-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN 最方便的快速导入、下载操作 - 文件浏览器</title>
    <link href="https://svnbucket.com/posts/import-and-download/"/>
    <id>https://svnbucket.com/posts/import-and-download/</id>
    <published>2021-04-06T12:25:46.000Z</published>
    <updated>2023-03-29T13:05:24.758Z</updated>
    
    <content type="html"><![CDATA[<p>本篇讲解如何使用 TortoiseSVN 的文件浏览器查看 SVN 上的文件，并且进行文件的导入、上传、下载操作，就跟操作 FTP 一样简单方便。<br>这种操作方式非常适合非开发人员使用，上手简单操作方便</p><span id="more"></span><blockquote><p>如果你还没有 SVN 服务端，推荐你使用 <a href="https://svnbucket.com/">SVNBucket</a>，提供了可视化的操作界面，非常简单方便</p></blockquote><h6 id="查看-SVN-中的文件，导入新文件"><a href="#查看-SVN-中的文件，导入新文件" class="headerlink" title="查看 SVN 中的文件，导入新文件"></a>查看 SVN 中的文件，导入新文件</h6><p><img src="1import.gif" alt="查看和导入文件"></p><ul><li>首先我们到 SVNBucket 网站上复制了一个 SVN 项目的仓库地址。</li><li>然后在一个目录中右键选择<code>TortoiseSVN - Repo-Browser</code>（你需要<a href="/posts/download-install-svn/">安装 TortoiseSVN</a>才有这个右键菜单）</li><li>填入你的 SVN 仓库地址，点击确定就可以浏览到 SVN 仓库里的文件了（因为我演示的项目没有文件在仓库里，所以这里是空白）</li><li>然后我们就可以拖动文件到里面直接导入文件到 SVN 仓库啦（弹出来的窗口是让你填写提交描述，我们也可以不用填写，直接确定就提交上去了）</li></ul><h6 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h6><p><img src="2download.gif" alt="拖动下载svn中的文件"></p><ul><li>直接从文件浏览器中拖动出来就可以下载文件了，非常方便。</li><li>另外你还可以拖动文件到里面上传文件喔。</li></ul><h6 id="创建文件夹、移动文件"><a href="#创建文件夹、移动文件" class="headerlink" title="创建文件夹、移动文件"></a>创建文件夹、移动文件</h6><p><img src="3move.gif" alt="创建文件夹、移动文件"></p><ul><li>右键菜单我们还可以直接在 SVN 仓库中创建文件夹</li><li>拖动就可以移动文件位置</li><li>当前你也可以在自己电脑上创建好文件夹，然后拖动上传，只不过麻烦一点点。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇讲解如何使用 TortoiseSVN 的文件浏览器查看 SVN 上的文件，并且进行文件的导入、上传、下载操作，就跟操作 FTP 一样简单方便。&lt;br&gt;这种操作方式非常适合非开发人员使用，上手简单操作方便&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CornerStone使用教程</title>
    <link href="https://svnbucket.com/posts/cornerstone-tutorial/"/>
    <id>https://svnbucket.com/posts/cornerstone-tutorial/</id>
    <published>2021-04-03T09:24:25.000Z</published>
    <updated>2023-01-15T09:37:24.201Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cornerstone.assembla.com/">CornerStone</a>  是 Mac 上一个比较流行的 SVN 客户端，本篇就给大家讲解下如何使用它</p><span id="more"></span><p>我们以国内最好的 SVN 平台 <a href="https://svnbucket.com/">SVNBucket</a> 作为 SVN 的服务端，讲解如何配置。</p><p>点击加号，选择Add Repository…<br><img src="1.jpg" alt="CornerStone"></p><p>下图是填写具体的仓库信息<br>选择SVN Server<br>Tunnel：保持None<br>Server：填写我们的域名：svnbucket.com<br>Port：填写SVN的默认端口号：3690<br>Path：填写你的项目地址域名后面那部分：jubaisi/wxz（假设完整仓库地址是svn://svnbucket.com/jubaisi/wxz）</p><p>点击ADD就可以了。<br><img src="2.jpg"><br>ADD到CornerStone后你还要点击软件左上角的Check Out，这样才会把代码从服务器上检出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cornerstone.assembla.com/&quot;&gt;CornerStone&lt;/a&gt;  是 Mac 上一个比较流行的 SVN 客户端，本篇就给大家讲解下如何使用它&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>svn忽略教程</title>
    <link href="https://svnbucket.com/posts/svn-ignore/"/>
    <id>https://svnbucket.com/posts/svn-ignore/</id>
    <published>2021-04-03T01:39:05.000Z</published>
    <updated>2021-12-28T06:09:08.506Z</updated>
    
    <content type="html"><![CDATA[<p>工作中，通常会有一些文件是不需要提交的，比如前端开发经常遇到的<code>node_modules</code>目录，以及一些build过程生成的临时文件。<br>添加忽略可以减少不必要的提交，节省提交和更新时间，还可以节省 SVN 服务端的空间占用。</p><span id="more"></span><p>如果你不想看文字教程，你还可以看 <a href="https://www.bilibili.com/video/BV1k4411m7mP?p=4">SVN添加忽略视频教程</a></p><h6 id="1-添加忽略"><a href="#1-添加忽略" class="headerlink" title="1. 添加忽略"></a>1. 添加忽略</h6><p>假设我们现在需要忽略掉<code>useless.txt</code>这个文件，使用TortoiseSVN非常方便。<br>选中要忽略的文件，右键菜单选择<code>Add to ignore list</code>：<br><img src="vrG2QKUMzog5Fpn.jpg" alt="svn ignore添加忽略"></p><p>注意，如果你需要精确忽略这个文件，选择<code>useless.txt</code><br>选择<code>*.txt</code>将忽略项目中所有这个后缀的文件。</p><p>除了在目录中右键选择文件进行忽略，我们还可以在提交窗口直接进行文件忽略：<br><img src="rT9CHFnVdhIjZBX.jpg" alt="svn忽略文件"></p><p>当你添加忽略后，被忽略的文件就会从提交窗口消失<br>另外，你会发现，当前文件的父目录会有一个属性修改的变动，我们需要把这个变动提交到上去，这样其他协作者也同步了这个忽略。</p><p>如果你双击查看diff，你会发现，其实他里面就是记录了我们刚忽略的文件名字。<br><img src="EqJl5UcKjpnf48t.png" alt="svn添加忽略后属性变动提交"></p><p>以上是文件的忽略，目录的忽略操作步骤是一样的，不一样的是，忽略目录后，他会把目录下的所有文件都忽略。<br>另外，你可能发现了，忽略选项里有些是加了<code>(recursively)</code>的，这个表示递归忽略，这样子目录也会忽略</p><h6 id="2-忽略已提交过的文件"><a href="#2-忽略已提交过的文件" class="headerlink" title="2. 忽略已提交过的文件"></a>2. 忽略已提交过的文件</h6><p>上面我们忽略的文件都是还未提交过的新文件，如果是已经提交到服务器的文件，添加忽略时稍微有点不一样，这时候提示多了<code>Unversion</code>，这表示取消版本管理并且添加到忽略列表。<br><img src="xiftLIZl5SunOKq.png" alt="svn添加忽略"></p><p>上面我们把<code>test.html</code>文件取消了版本管理并且添加到忽略列表了，这时候的提交变动我们看下：<br><img src="BjPLb6KprZvUuRd.png" alt="svn忽略已经提交的文件"></p><p>会发现多了一个删除<code>test.html</code>的提交，这表示从版本库中删除这个文件，我们需要把这个变动提交上去，这样其他协作者也会把这个文件取消版本管理</p><h6 id="3-取消忽略"><a href="#3-取消忽略" class="headerlink" title="3. 取消忽略"></a>3. 取消忽略</h6><p>如果你需要取消忽略，操作跟添加忽略时一样，再操作一次就行了，只是提示语变成了 Remove from …<br><img src="cancel-ignore.jpg" alt="svn取消忽略"></p><h6 id="4-添加全局忽略"><a href="#4-添加全局忽略" class="headerlink" title="4. 添加全局忽略"></a>4. 添加全局忽略</h6><p>假设有些文件我们是需要所有项目都进行忽略的，我们可以添加全局忽略。<br>非常简单，右键–&gt;TortoiseSVN–&gt;Settings，打开SVN的设置页面，填写需要忽略的内容<br><img src="iIR7rHN3LcSTvsW.png" alt="svn全局忽略"><br>你会发现，它默认就已经添加了很多文件的忽略，你可以往里面添加更多需要忽略的文件，也可以删除不需要忽略的，对全部项目生效。</p><p>更多阅读：<a href="/posts/svn-commands-tutorial/#%E6%B7%BB%E5%8A%A0%E5%BF%BD%E7%95%A5-ignore">SVN 命令行添加忽略</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工作中，通常会有一些文件是不需要提交的，比如前端开发经常遇到的&lt;code&gt;node_modules&lt;/code&gt;目录，以及一些build过程生成的临时文件。&lt;br&gt;添加忽略可以减少不必要的提交，节省提交和更新时间，还可以节省 SVN 服务端的空间占用。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>svn权限设置</title>
    <link href="https://svnbucket.com/posts/svn-config-authz/"/>
    <id>https://svnbucket.com/posts/svn-config-authz/</id>
    <published>2021-04-02T10:29:19.000Z</published>
    <updated>2023-01-15T09:33:52.261Z</updated>
    
    <content type="html"><![CDATA[<p>SVN可以做到文件级的权限控制，可以为你团队中不同角色的人分配不同的权限。<br>本篇文章讲解在<code>SVNBucket</code>中如何配置svn的权限</p><span id="more"></span><p>权限分为3类：读写；只读；无权限<br>我们提供两种配置方式，不同的效果，可以根据你的实际情况选择</p><h6 id="方式一，设置哪些目录有权限"><a href="#方式一，设置哪些目录有权限" class="headerlink" title="方式一，设置哪些目录有权限"></a>方式一，设置哪些目录有权限</h6><p>如下图，直接指定哪些目录用户有权限读写。<br>这种设置方式比较安全，用户只能读写指定的目录，就算增加了新文件夹，只要不是它的子目录，他都是没有权限看到的，但是缺点就是<code>checkout</code>的时候不能从根目录<code>checkout</code>，你只能从有权限的那个目录检出，如果是有多个目录，就要分别<code>checkout</code>了。<br><img src="1.png" alt="svnbucket里的svn权限设置"></p><h6 id="方式二，设置哪些目录无权限"><a href="#方式二，设置哪些目录无权限" class="headerlink" title="方式二，设置哪些目录无权限"></a>方式二，设置哪些目录无权限</h6><p>这种配置方式最大的好处就是让你可以从根目录<code>checkout</code><br>如下图，假设我根目录有<code>trunk</code>、<code>branches</code>、<code>tags</code>三个目录，现在只想开放<code>/trunk</code>给开发人员，那么根目录<code>/</code>我们设置只读（这样他才能从根目录检出），<code>/trunk</code>目录设置读写，其他目录都设置为无权限。<br>这样配置就可以从根目录检出了，但是也存在一定的风险，例如，某天在根目录又多加了一个 xx 目录，如果你忘了给这个目录设置无权限，那么所有用户都会有 xx 目录的权限。<br><img src="2.png" alt="svnbucket里的svn权限设置"></p><p>两种设置方式各有优缺点，大家自行选择，如果是追求安全，建议选择第一种方式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SVN可以做到文件级的权限控制，可以为你团队中不同角色的人分配不同的权限。&lt;br&gt;本篇文章讲解在&lt;code&gt;SVNBucket&lt;/code&gt;中如何配置svn的权限&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>svn钩子教程</title>
    <link href="https://svnbucket.com/posts/svn-hooks-tutorial/"/>
    <id>https://svnbucket.com/posts/svn-hooks-tutorial/</id>
    <published>2021-04-01T10:29:19.000Z</published>
    <updated>2022-11-25T08:57:48.499Z</updated>
    
    <content type="html"><![CDATA[<p>钩子其实和回调是一个概念，当某个事情发生时就会调用你提供的方法，利用好SVN钩子可以大大的方便你的开发。<br>web 开发人员，每次提交了代码都需要手动到服务器更新下代码才能看到效果。<br>今天我就教大家如何利用钩子自动化更新。</p><span id="more"></span><p>下面我们将讲解在<code>SVNBucket</code>中如何配置钩子，如果你还没有<code>SVNBucket</code>帐号，<a href="https://svnbucket.com/">点击注册</a><br><img src="cBxz1x.md.jpg" alt="svnbucket 添加钩子"></p><p>在SVNBucket的项目详情页，我们打开钩子配置页面，如上图，点击添加钩子，我们需要填入 链接、token、触发条件</p><p><strong>链接</strong>：就好比我们的回调方法，在你提交代码后就会自动调用这个链接，你收到调用后就可以执行代码更新了。<br><strong>token</strong>：是一个可选的参数，在调用链接时会带上这个参数，可以用来检查调用是否来自 SVNBucket。这里可以随意填写一个自己想要的参数就行了<br><strong>触发条件</strong>：触发条件我们选择提交后，这样代码提交之后就会调用链接。<br><strong>备注</strong>：可以填写一个方便你记忆的名字，例如：更新测试服代码的钩子</p><p>那么我们的链接填写什么呢？你需要自己写一个http服务，用来接收调用。</p><h6 id="编写更新脚本"><a href="#编写更新脚本" class="headerlink" title="编写更新脚本"></a>编写更新脚本</h6><p>下面我以Python代码为例（PHP版本看文章最后），写一个简单的 http 服务来接收调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 你需要安装 flask：pip install flask</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/onCommit&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onCommit</span>():</span></span><br><span class="line">    <span class="comment"># 参数有：</span></span><br><span class="line">    <span class="comment"># event: 事件名字，有 start-commit（提交前）， post-commit（提交后）</span></span><br><span class="line">    <span class="comment"># token: 校验字符串，你在配置钩子那里填写的值</span></span><br><span class="line">    <span class="comment"># projectId: 项目ID</span></span><br><span class="line">    <span class="comment"># projectName: 项目名字</span></span><br><span class="line">    <span class="comment"># rev: 版本号（ post-commit 事件才有值）</span></span><br><span class="line">    <span class="comment"># txnName：事务名，例如：44-23</span></span><br><span class="line">    <span class="comment"># log：提交描述内容，</span></span><br><span class="line">    <span class="comment"># user：提交者用户名</span></span><br><span class="line">    <span class="comment"># changedDirs: 本次提交涉及哪些目录更新，多个用冒号拼接，例如：&quot;trunk/src:trunk/static&quot;（ post-commit 事件才有值），</span></span><br><span class="line">    <span class="comment"># 高级技巧：利用好 log、user、changedDirs 参数可以做选择性的更新，比如判断 log 中包含 “update” 才进行服务器更新；</span></span><br><span class="line">    <span class="comment"># 判断更新了某个目录中的文件才更新；</span></span><br><span class="line">    param = request.form</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印收到的参数</span></span><br><span class="line">    keys = param.keys()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s=%s&#x27;</span> % (key, param.get(key, <span class="string">&#x27;&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 校验token，检查是不是自己在 SVNBucket 上配置的，防止恶意请求</span></span><br><span class="line">    <span class="keyword">if</span> param.get(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;&#x27;</span>) != <span class="string">&#x27;YourToken&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;token校验不对，忽略&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;invalid request&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提交成功后，进行服务器代码更新、重启服务器等操作</span></span><br><span class="line">    <span class="keyword">if</span> param.get(<span class="string">&#x27;event&#x27;</span>) == <span class="string">&#x27;post-commit&#x27;</span>:</span><br><span class="line">        <span class="comment"># 任何提交都更新</span></span><br><span class="line">        <span class="comment"># 调用shell脚本进行svn update</span></span><br><span class="line">        output = os.popen(<span class="string">&#x27;./up_and_restart.sh&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(output.read())</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 高级用法：当log中包含udpate才更新</span></span><br><span class="line">        <span class="comment"># if &#x27;update&#x27; in param.get(&#x27;log&#x27;, &#x27;&#x27;):</span></span><br><span class="line">        <span class="comment">#    output = os.popen(&#x27;./up_and_restart.sh&#x27;)</span></span><br><span class="line">        <span class="comment">#    print output.read()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 高级用法：/trunk/src 目录变动了才更新</span></span><br><span class="line">        <span class="comment"># if &#x27;trunk/src&#x27; in param.get(&#x27;changedDirs&#x27;, &#x27;&#x27;):</span></span><br><span class="line">        <span class="comment">#    output = os.popen(&#x27;./up_and_restart.sh&#x27;)</span></span><br><span class="line">        <span class="comment">#    print output.read()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这个响应内容会在钩子记录那里显示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> param.get(<span class="string">&#x27;event&#x27;</span>) == <span class="string">&#x27;start-commit&#x27;</span>:</span><br><span class="line">        <span class="comment"># 如果是 start-commit 事件，必须返回 ok 才能提交，否则禁止提交并且会把返回的内容显示在 SVN 客户端。</span></span><br><span class="line">        <span class="comment"># 可以用来判断 log 是否符合规范，然后决定是否允许提交。</span></span><br><span class="line">        <span class="comment"># if len(param.get(&#x27;log&#x27;)) == 0:</span></span><br><span class="line">        <span class="comment">#     return &#x27;必须填写提交日志&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    <span class="comment"># 测试钩子时事件名是 test</span></span><br><span class="line">    <span class="keyword">elif</span> param.get(<span class="string">&#x27;event&#x27;</span>) == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;test ok&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>这里我们用 Python 的 flask 框架搭建了一个简单的 http 服务来处理代码更新。根据这个可以自己实现一个其他语言的版本<br>在收到请求后我们就执行了一个shell脚本，这个shell脚本就是调用svn update去更新我们的代码了。<br><code>up_and_restart.sh</code>脚本内容类似以下内容（根据你的业务需求写）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn update /path/to/your/code/dir</span><br><span class="line">service restart xxxx</span><br></pre></td></tr></table></figure><p>假设你的服务器IP是<code>119.29.35.39</code>，http 服务的端口是8080，接口为 /afterCommit，那么我们就应该配置上面的链接地址为：<img src="2.jpg" alt="svn钩子使用教程"></p><p>配置好了后，我们可以点击测试按钮进行测试，这样就会手动的触发一次链接请求，并且在下面区域显示调用记录、是否成功<br><img src="ga33zhanmy000000.png" alt="svn钩子使用教程"></p><p>上面讲解的是提交后钩子的经典应用（更新代码）<br>提交前钩子最经典的应用是判断是否有填写描述内容，我们可以限制不填写提交描述就不给提交，SVNBucket 已经为你做好了这个功能，只需要在设置页面开启下就可以了。<br><img src="XHhOLDeZmz7QlV6.jpg" alt="svnbucket开启必须填写描述内容"></p><p>最后再提供一个PHP版本的供参考：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line">header(<span class="string">&quot;Cache-Control:no-cache,must-revalidate&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 参数有：</span></span><br><span class="line"><span class="comment">// event: 事件名字，有 start-commit（提交前）， post-commit（提交后）</span></span><br><span class="line"><span class="comment">// token: 校验字符串，你在配置钩子那里填写的值</span></span><br><span class="line"><span class="comment">// projectId: 项目ID</span></span><br><span class="line"><span class="comment">// projectName: 项目名字</span></span><br><span class="line"><span class="comment">// rev: 版本号（ post-commit 事件才有值）</span></span><br><span class="line"><span class="comment">// txnName：事务名，例如：44-23</span></span><br><span class="line"><span class="comment">// log：提交描述内容，</span></span><br><span class="line"><span class="comment">// user：提交者用户名</span></span><br><span class="line"><span class="comment">// changedDirs: 本次提交涉及哪些目录更新，多个用冒号拼接，例如：&quot;trunk/src:trunk/static&quot;（ post-commit 事件才有值），</span></span><br><span class="line"><span class="comment">// 高级技巧：利用好 log、user、changedDirs 参数可以做选择性的更新，比如判断 log 中包含 “update” 才进行服务器更新；</span></span><br><span class="line"><span class="comment">// 判断更新了某个目录中的文件才更新；</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>] === <span class="string">&#x27;你填写的Token值&#x27;</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="string">&#x27;你的SVN用户名&#x27;</span>;</span><br><span class="line">    <span class="variable">$password</span> = <span class="string">&#x27;你的SVN密码&#x27;</span>;</span><br><span class="line">    <span class="variable">$target_dir</span> = <span class="string">&#x27;/data/www&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    exec(<span class="string">&quot;svn up --username <span class="subst">$username</span> --password <span class="subst">$password</span> --no-auth-cache <span class="subst">$target_dir</span> 2&gt;&amp;1&quot;</span>, <span class="variable">$output</span>, <span class="variable">$outresult</span>);</span><br><span class="line">    print_r(<span class="string">&quot;\noutput:<span class="subst">$output</span>, result:<span class="subst">$outresult</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$outresult</span> ===<span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;更新成功！&#x27;</span>;</span><br><span class="line">        <span class="comment">//echo print_r($output);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;更新失败！&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> print_r(<span class="variable">$output</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;failed&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据校验失败，无效更新！&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;failed&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;钩子其实和回调是一个概念，当某个事情发生时就会调用你提供的方法，利用好SVN钩子可以大大的方便你的开发。&lt;br&gt;web 开发人员，每次提交了代码都需要手动到服务器更新下代码才能看到效果。&lt;br&gt;今天我就教大家如何利用钩子自动化更新。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>svn常用命令</title>
    <link href="https://svnbucket.com/posts/svn-commands-tutorial/"/>
    <id>https://svnbucket.com/posts/svn-commands-tutorial/</id>
    <published>2021-04-01T10:28:20.000Z</published>
    <updated>2021-12-28T06:08:41.024Z</updated>
    
    <content type="html"><![CDATA[<p>SVN 的命令通常都很少用，在 windows 上，我们通常都是使用图形化的操作界面，例如 <a href="/posts/svn-tutorial/">TortoiseSVN</a>，提供了很好的图形化操作界面，上手简单方便。<br>但是有时候我们需要在服务器这类没有图形化操作界面的机器上使用 SVN，这时候我们就需要用到 SVN 的命令来操作了。<br>本篇给大家讲解一些 SVN 的常用命令，日常使用学会这些就足够了。</p><span id="more"></span><p>本文讲解的是 SVN 客户端的命令操作，你需要一个 SVN 服务端才能进行交互，如果你还没有 SVN 服务器，推荐你使用 <a href="https://svnbucket.com/">SVNBucket</a></p><h3 id="代码检出-checkout"><a href="#代码检出-checkout" class="headerlink" title="代码检出 checkout"></a>代码检出 checkout</h3><p>这个命令会把 SVN 服务器上的代码下载到我们电脑上，checkout 也可以简写为 co</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svn checkout svn://svnbucket.com/xxx/xxx</span><br><span class="line"><span class="comment"># 指定存储目录</span></span><br><span class="line">svn checkout svn://svnbucket.com/xxx/xxx save-dir</span><br><span class="line"><span class="comment"># 指定用户名密码。</span></span><br><span class="line">svn checkout svn://svnbucket.com/xxx/xxx --username xxxx --password xxx</span><br></pre></td></tr></table></figure><h3 id="提交代码-commit"><a href="#提交代码-commit" class="headerlink" title="提交代码 commit"></a>提交代码 commit</h3><p>此命令可以把我们本地的修改提交到 SVN 服务器，这样其他同事就能更新到我们的代码了。<br>commit 可以简写为 ci，-m 参数后面跟的是本次提交的描述内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 描述是必须的，但是可以填写空字符串，不指定</span></span><br><span class="line">svn commit -m <span class="string">&quot;提交描述&quot;</span></span><br><span class="line"><span class="comment"># 只提交指定文件或目录</span></span><br><span class="line">svn commit /path/to/file-or-dir -m <span class="string">&quot;提交指定文件&quot;</span></span><br><span class="line"><span class="comment"># 指定后缀的所有文件</span></span><br><span class="line">svn commit *.js -m <span class="string">&quot;提交所有 js 文件&quot;</span></span><br></pre></td></tr></table></figure><h3 id="更新代码-update"><a href="#更新代码-update" class="headerlink" title="更新代码 update"></a>更新代码 update</h3><p>执行此命令后会把其他人提交的代码从 SVN 服务器更新到我们自己电脑上，update 也可以简写为 up</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新到最新</span></span><br><span class="line">svn update</span><br><span class="line"><span class="comment"># 更新到指定版本的代码。特别是最新版本代码有问题时，我们可以用这个命令回到之前的版本</span></span><br><span class="line">svn update -r xxx </span><br><span class="line"><span class="comment"># 仅更新指定文件或者目录</span></span><br><span class="line">svn up /path/to/file-or-dir</span><br></pre></td></tr></table></figure><h3 id="添加文件-add"><a href="#添加文件-add" class="headerlink" title="添加文件 add"></a>添加文件 add</h3><p>新建的文件，我们需要用 add 命令把它们加入 SVN 的版本管理，然后我们才可以提交它。<br>注意：添加后还需要进行提交喔。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件或目录</span></span><br><span class="line">svn add /path/to/file-or-dir</span><br><span class="line"><span class="comment"># 添加当前目录下所有 php 文件</span></span><br><span class="line">svn add *.php</span><br></pre></td></tr></table></figure><h3 id="删除文件-delete"><a href="#删除文件-delete" class="headerlink" title="删除文件 delete"></a>删除文件 delete</h3><p>此命令会从 SVN 移除版本控制，移除后你需要提交一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn delete /path/to/file-or-dir</span><br><span class="line"><span class="comment"># 删除版本控制，但是本地依旧保留文件</span></span><br><span class="line">svn delete /path/to/file-or-dir --keep-local</span><br></pre></td></tr></table></figure><h3 id="查看日志-log"><a href="#查看日志-log" class="headerlink" title="查看日志 log"></a>查看日志 log</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录的日志</span></span><br><span class="line">svn <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 查看指定文件或目录的提交日志</span></span><br><span class="line">svn <span class="built_in">log</span> /path/to/file-or-dir</span><br><span class="line"><span class="comment"># 查看日志，并且输出变动的文件列表</span></span><br><span class="line">svn <span class="built_in">log</span> -v</span><br><span class="line"><span class="comment"># 限定只输出最新的 5 条日志</span></span><br><span class="line">svn <span class="built_in">log</span> -l 5</span><br></pre></td></tr></table></figure><h3 id="查看变动-diff"><a href="#查看变动-diff" class="headerlink" title="查看变动 diff"></a>查看变动 diff</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前工作区的改动</span></span><br><span class="line">svn diff</span><br><span class="line"><span class="comment"># 查看指定文件或目录的改动</span></span><br><span class="line">svn diff /path/to/file-or-dir</span><br><span class="line"><span class="comment"># 本地文件跟指定版本号比较差异</span></span><br><span class="line">svn diff /path/to/file-or-dir -r xxx</span><br><span class="line"><span class="comment"># 指定版本号比较差异</span></span><br><span class="line">svn diff /path/to/file-or-dir -r 1:2 </span><br></pre></td></tr></table></figure><h3 id="撤销修改-revert"><a href="#撤销修改-revert" class="headerlink" title="撤销修改 revert"></a>撤销修改 revert</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销文件的本地修改</span></span><br><span class="line">svn revert test.php</span><br><span class="line"><span class="comment"># 递归撤销目录中的本地修改</span></span><br><span class="line">svn revert -R /path/to/dir</span><br></pre></td></tr></table></figure><h3 id="添加忽略-ignore"><a href="#添加忽略-ignore" class="headerlink" title="添加忽略 ignore"></a>添加忽略 ignore</h3><p>SVN 的忽略是通过设置目录的属性 prop 来实现的，添加后会有一个目录属性变动的修改需要提交，记得要提交一下喔，这样其他人也有了这个忽略配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有 log 文件。注意最后有个点号，表示在当前目录设置忽略属性。</span></span><br><span class="line">svn propset svn:ignore <span class="string">&quot;*.log&quot;</span> .</span><br><span class="line"><span class="comment"># 递归忽略 global-ignores</span></span><br><span class="line">svn propset svn:global-ignores <span class="string">&quot;*.log&quot;</span> .</span><br><span class="line"><span class="comment"># 从文件读取忽略规则，一行一个规则。</span></span><br><span class="line">svn propset svn:ignore -F filename.txt .</span><br><span class="line"><span class="comment"># 打开编辑器修改忽略属性</span></span><br><span class="line">svn propedit svn:ignore .</span><br><span class="line"><span class="comment"># 查看当前目录的属性配置</span></span><br><span class="line">svn proplist . -v</span><br><span class="line"><span class="comment"># 删除当前目录的忽略设置</span></span><br><span class="line">svn propdel svn:ignore .</span><br></pre></td></tr></table></figure><div class="tip">    忽略仅对还未添加到版本库的文件生效，已经在版本库里的文件，添加忽略后是不会自动删除的也不会忽略，需要手动 delete 命令删除下才行。</div><p><a href="/posts/svn-ignore/">TortoiseSVN 添加忽略</a>会更加简单，也会自动执行删除命令。</p><h3 id="查看状态-status"><a href="#查看状态-status" class="headerlink" title="查看状态 status"></a>查看状态 status</h3><p>任何时候，你可以用下面的命令查看当前工作目录的 SVN 状态喔，会列出来哪些文件有变动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn status</span><br><span class="line">svn status /path/to/file-or-dir</span><br></pre></td></tr></table></figure><h3 id="清理-cleanup"><a href="#清理-cleanup" class="headerlink" title="清理 cleanup"></a>清理 cleanup</h3><p>这个命令我们经常在 SVN 出现报错时可以执行一下，这样就会清理掉本地的一些缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn cleanup</span><br></pre></td></tr></table></figure><h3 id="查看信息-info"><a href="#查看信息-info" class="headerlink" title="查看信息 info"></a>查看信息 info</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn info</span><br></pre></td></tr></table></figure><h3 id="查看文件列表-ls"><a href="#查看文件列表-ls" class="headerlink" title="查看文件列表 ls"></a>查看文件列表 ls</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn ls </span><br><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line">svn ls -r 100</span><br></pre></td></tr></table></figure><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定版本的文件内容，不加版本号就是查看最新版本的</span></span><br><span class="line">svn cat test.py -r 2</span><br></pre></td></tr></table></figure><h3 id="查看-blame"><a href="#查看-blame" class="headerlink" title="查看 blame"></a>查看 blame</h3><p>显示文件的每一行最后是谁修改的（出了BUG，经常用来查这段代码是谁改的）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn blame filename.php</span><br></pre></td></tr></table></figure><h3 id="地址重定向"><a href="#地址重定向" class="headerlink" title="地址重定向"></a>地址重定向</h3><p>如果你的 SVN 地址变了，不需要重新 checkout 代码，只需要这样重定向一下就可以了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn switch --relocate 原 SVN 地址 新 SVN 地址</span><br></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支，从主干 trunk 创建一个分支保存到 branches/online1.0</span></span><br><span class="line">svn cp -m <span class="string">&quot;描述内容&quot;</span> http://svnbucket.com/repos/trunk http://svnbucket.com/repos/branches/online1.0</span><br><span class="line"><span class="comment"># 合并主干上的最新代码到分支上</span></span><br><span class="line"><span class="built_in">cd</span> branches/online1.0</span><br><span class="line">svn merge http://svnbucket.com/repos/trunk </span><br><span class="line"><span class="comment"># 分支合并到主干</span></span><br><span class="line">svn merge --reintegrate http://svnbucket.com/repos/branches/online1.0</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">svn switch svn://svnbucket.com/<span class="built_in">test</span>/branches/online1.0</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">svn rm http://svnbucket.com/repos/branches/online1.0</span><br></pre></td></tr></table></figure><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看SVN帮助</span></span><br><span class="line">svn <span class="built_in">help</span></span><br><span class="line"><span class="comment"># 查看指定命令的帮助信息</span></span><br><span class="line">svn <span class="built_in">help</span> commit</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;SVN 的命令通常都很少用，在 windows 上，我们通常都是使用图形化的操作界面，例如 &lt;a href=&quot;/posts/svn-tutorial/&quot;&gt;TortoiseSVN&lt;/a&gt;，提供了很好的图形化操作界面，上手简单方便。&lt;br&gt;但是有时候我们需要在服务器这类没有图形化操作界面的机器上使用 SVN，这时候我们就需要用到 SVN 的命令来操作了。&lt;br&gt;本篇给大家讲解一些 SVN 的常用命令，日常使用学会这些就足够了。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>

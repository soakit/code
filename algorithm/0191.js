/*
请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。

示例 1：
    输入：00000000000000000000000000001011
    输出：3
    解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
*/
// 方式1、 
// 时间复杂度 O(M)
// n & (n - 1)操作，仅有减法和与运算，占用 O(1);
// 设 M 为二进制数字 n 中 1 的个数，则需循环 M 次（每轮消去一个 1 ），占用 O(M) 。
// 空间复杂度 O(1)
// 变量 count 使用常数大小额外空间。
var hammingWeight = function (n) {
    let count = 0;
    while (n) {
        count++;
        n = n & (n - 1);
    }
    return count
};
// 方式2、
// 此算法循环内部仅有 移位、与、加 等基本运算，时间复杂度 O(1)，逐位判断需循环 log_2 n 次。
// 空间复杂度 O(1)
// 变量 count 使用常数大小额外空间。
var hammingWeight = function (n) {
    let count = 0;
    while (n) {
        count += n & 1;
        n >>>= 1;
    }
    return count;
};
